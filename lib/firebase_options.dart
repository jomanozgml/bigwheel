// File generated by FlutterFire CLI.
// ignore_for_file: lines_longer_than_80_chars, avoid_classes_with_only_static_members
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:bigwheel/secret.dart';
import 'package:flutter/foundation.dart'
    show TargetPlatform, defaultTargetPlatform, kIsWeb;
// ignore: avoid_web_libraries_in_flutter
// import 'dart:html';
// import 'package:flutter_dotenv/flutter_dotenv.dart';

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
// final String apiKey = Platform.environment['APIKEY']!;

// Dev env
// final String apiKeyDev = dotenv.env['apiKey']!;
// final String apiKeyDev = Platform.environment.containsKey('CI')
//     ? Platform.environment['FIREBASE_API_KEY']!
//     : dotenv.env['apiKey']!;

getAPI(String label){
  var secrets = Secrets();
  return secrets.secretsMap[label];
  // String value = //window.localStorage.containsKey('CI')
    // window.localStorage[label]!;
    // : dotenv.env[label]!;
  // return value;
}
// Prod env
// final String apiKeyProd = dotenv.env['apiKeyProd']!;
// final String authDomainProd = dotenv.env['authDomainProd']!;
// final String projectIdProd = dotenv.env['projectIdProd']!;
// final String storageBucketProd = dotenv.env['storageBucketProd']!;
// final String messagingSenderIdProd = dotenv.env['messagingSenderIdProd']!;
// final String appIdProd = dotenv.env['appIdProd']!;
// final String measurementIdProd = dotenv.env['measurementIdProd']!;

class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      const flavor = String.fromEnvironment('FLAVOR', defaultValue: 'dev');
      switch (flavor) {
        case 'dev':
          return dev;
        case 'prod':
          return prod;
        default:
          throw UnsupportedError(
            'DefaultFirebaseOptions have not been configured for $flavor - '
            'you can reconfigure this by running the FlutterFire CLI again.',
          );
      }

      // return kDebugMode ? dev : prod;
       // return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        // return android;
      case TargetPlatform.iOS:
      case TargetPlatform.macOS:
      case TargetPlatform.windows:
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for this platform - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static FirebaseOptions dev = FirebaseOptions(
    apiKey: getAPI('apiKey'),
    authDomain: getAPI('authDomain'),
    projectId: getAPI('projectId'),
    storageBucket: getAPI('storageBucket'),
    messagingSenderId: getAPI('messagingSenderId'),
    appId: getAPI('appId'),
    measurementId: getAPI('measurementId'),
  );

  static FirebaseOptions prod = FirebaseOptions(
    apiKey: getAPI('apiKeyProd'),
    authDomain: getAPI('authDomainProd'),
    projectId: getAPI('projectIdProd'),
    storageBucket: getAPI('storageBucketProd'),
    messagingSenderId: getAPI('messagingSenderIdProd'),
    appId: getAPI('appIdProd'),
    measurementId: getAPI('measurementIdProd'),

  // static const FirebaseOptions prod = FirebaseOptions(
    // apiKey: Secrets.apiKeyProd,
    // authDomain: Secrets.authDomainProd,
    // projectId: Secrets.projectIdProd,
    // storageBucket: Secrets.storageBucketProd,
    // messagingSenderId: Secrets.messagingSenderIdProd,
    // appId: Secrets.appIdProd,
    // measurementId: Secrets.measurementIdProd,
  // );
  );
}
